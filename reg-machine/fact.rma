(assign proc (op make-compiled-procedure) (label entry4) (reg env))
(goto (label after-lambda3))
entry4
(assign env (op compiled-procedure-env) (reg proc))
(assign env (op extend-environment) (const (fact1)) (reg argl) (reg env))
(assign val (op make-compiled-procedure) (label entry9) (reg env))
(goto (label after-lambda8))
entry9
(assign env (op compiled-procedure-env) (reg proc))
(assign env (op extend-environment) (const (n2)) (reg argl) (reg env))
(save continue)
(save env)
(assign proc (op lookup-variable-value) (const =) (reg env))
(assign val (const 0))
(assign argl (op list) (reg val))
(assign val (op lookup-variable-value) (const n2) (reg env))
(assign argl (op cons) (reg val) (reg argl))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch24))
compiled-branch23
(assign continue (label after-call22))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch24
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call22
(restore env)
(restore continue)
(test (op false?) (reg val))
(branch (label false-branch11))
true-branch12
(assign val (const 1))
(goto (reg continue))
false-branch11
(assign proc (op lookup-variable-value) (const *) (reg env))
(save continue)
(save proc)
(save env)
(assign proc (op lookup-variable-value) (const fact1) (reg env))
(save proc)
(assign proc (op lookup-variable-value) (const -) (reg env))
(assign val (const 1))
(assign argl (op list) (reg val))
(assign val (op lookup-variable-value) (const n2) (reg env))
(assign argl (op cons) (reg val) (reg argl))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch15))
compiled-branch14
(assign continue (label after-call13))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch15
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call13
(assign argl (op list) (reg val))
(restore proc)
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch18))
compiled-branch17
(assign continue (label after-call16))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch18
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call16
(assign argl (op list) (reg val))
(restore env)
(assign val (op lookup-variable-value) (const n2) (reg env))
(assign argl (op cons) (reg val) (reg argl))
(restore proc)
(restore continue)
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch21))
compiled-branch20
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch21
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
(goto (reg continue))
after-call19
after-if10
after-lambda8
(perform (op set-variable-value!) (const fact1) (reg val) (reg env))
(assign val (const ok))
(assign proc (op lookup-variable-value) (const fact1) (reg env))
(assign val (const 1))
(assign argl (op list) (reg val))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch7))
compiled-branch6
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch7
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
(goto (reg continue))
after-call5
after-lambda3
(assign val (const #f))
(assign argl (op list) (reg val))
(test (op primitive-procedure?) (reg proc))
(branch (label primitive-branch27))
compiled-branch26
(assign continue (label halt))
(assign val (op compiled-procedure-entry) (reg proc))
(goto (reg val))
primitive-branch27
(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
(goto (label halt))
after-call25